// <auto-generated />
using System;
using DataBase;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using NpgsqlTypes;

namespace DataBase.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20220122141432_ChengeAdressToAddressBooooooooy")]
    partial class ChengeAdressToAddressBooooooooy
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.22")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("DataBase.Models.ActionMeta", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ActionMeta");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Date = new DateTime(2022, 1, 22, 17, 14, 31, 672, DateTimeKind.Local).AddTicks(4453)
                        });
                });

            modelBuilder.Entity("DataBase.Models.Avatar", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Path")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Avatars");
                });

            modelBuilder.Entity("DataBase.Models.City", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Донецк"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "Макеевка"
                        });
                });

            modelBuilder.Entity("DataBase.Models.District", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("CityId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Districts");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CityId = 2L,
                            Name = "Червоногвардейка"
                        });
                });

            modelBuilder.Entity("DataBase.Models.DraftReport", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateLastEditing")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateRemoval")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<NpgsqlPoint>("Сoordinates")
                        .HasColumnType("point");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("DraftReports");
                });

            modelBuilder.Entity("DataBase.Models.DraftReportByProblemCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("DraftReportId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProblemCategoryId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DraftReportId");

                    b.HasIndex("ProblemCategoryId");

                    b.ToTable("DraftReportsByProblemCategories");
                });

            modelBuilder.Entity("DataBase.Models.Driver", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Drivers");
                });

            modelBuilder.Entity("DataBase.Models.DriverOnRoute", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("DriverId")
                        .HasColumnType("bigint");

                    b.Property<long>("TransportRouteId")
                        .HasColumnType("bigint");

                    b.Property<string>("VehicleNumber")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.HasIndex("TransportRouteId");

                    b.ToTable("DriversOnRoutes");
                });

            modelBuilder.Entity("DataBase.Models.HCS", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AdditionalInformation")
                        .HasColumnType("text");

                    b.Property<long>("AvatarId")
                        .HasColumnType("bigint");

                    b.Property<string>("ContactEmail")
                        .HasColumnType("text");

                    b.Property<string>("ContactPhoneNumber")
                        .HasColumnType("text");

                    b.Property<long?>("CreationId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<long>("HCSTypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("Hashtag")
                        .HasColumnType("text");

                    b.Property<bool>("IsDailyReportsGenerating")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEmailMailingEnabled")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSMSMailingEnabled")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("boolean");

                    b.Property<long?>("LastEditingId")
                        .HasColumnType("bigint");

                    b.Property<string>("MinistryEmail")
                        .HasColumnType("text");

                    b.Property<string>("MnemonicName")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<long?>("RemovalId")
                        .HasColumnType("bigint");

                    b.Property<long>("ResponsiblePersonId")
                        .HasColumnType("bigint");

                    b.Property<long>("TelegramChannelId")
                        .HasColumnType("bigint");

                    b.Property<string>("WebResourseURL")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AvatarId");

                    b.HasIndex("CreationId");

                    b.HasIndex("HCSTypeId");

                    b.HasIndex("LastEditingId");

                    b.HasIndex("RemovalId");

                    b.HasIndex("ResponsiblePersonId");

                    b.ToTable("HCSs");
                });

            modelBuilder.Entity("DataBase.Models.HCSByProblemCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("HCSId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProblemCategoryId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("HCSId");

                    b.HasIndex("ProblemCategoryId");

                    b.ToTable("HCSsByProblemCategories");
                });

            modelBuilder.Entity("DataBase.Models.HCSByRegion", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("HCSId")
                        .HasColumnType("bigint");

                    b.Property<long>("RegionId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("HCSId");

                    b.HasIndex("RegionId");

                    b.ToTable("HCSsByRegions");
                });

            modelBuilder.Entity("DataBase.Models.HCSTask", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long?>("CreationId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<long>("HCSId")
                        .HasColumnType("bigint");

                    b.Property<long>("HCSTaskTypeId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean");

                    b.Property<long?>("LastEditingId")
                        .HasColumnType("bigint");

                    b.Property<long?>("RemovalId")
                        .HasColumnType("bigint");

                    b.Property<long>("ReportId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreationId");

                    b.HasIndex("HCSId");

                    b.HasIndex("HCSTaskTypeId");

                    b.HasIndex("LastEditingId");

                    b.HasIndex("RemovalId");

                    b.HasIndex("ReportId");

                    b.ToTable("HCSTasks");
                });

            modelBuilder.Entity("DataBase.Models.HCSTaskType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("HCSTaskTypes");
                });

            modelBuilder.Entity("DataBase.Models.HCSType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("HCSTypes");
                });

            modelBuilder.Entity("DataBase.Models.MailingQueue", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long?>("CreationId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LastEditingId")
                        .HasColumnType("bigint");

                    b.Property<long>("MailingStatusId")
                        .HasColumnType("bigint");

                    b.Property<long?>("RemovalId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreationId");

                    b.HasIndex("LastEditingId");

                    b.HasIndex("MailingStatusId");

                    b.HasIndex("RemovalId");

                    b.ToTable("MailingQueues");
                });

            modelBuilder.Entity("DataBase.Models.MailingStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("MailingStatuses");
                });

            modelBuilder.Entity("DataBase.Models.MediaData", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("DraftReportId")
                        .HasColumnType("bigint");

                    b.Property<string>("Path")
                        .HasColumnType("text");

                    b.Property<long>("ReportId")
                        .HasColumnType("bigint");

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DraftReportId");

                    b.HasIndex("ReportId");

                    b.HasIndex("TypeId");

                    b.ToTable("MediaDatas");
                });

            modelBuilder.Entity("DataBase.Models.MediaDataType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("MediaDataTypes");
                });

            modelBuilder.Entity("DataBase.Models.ProblemCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("AvatarId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CreationId")
                        .HasColumnType("bigint");

                    b.Property<string>("HashTag")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("boolean");

                    b.Property<long?>("LastEditingId")
                        .HasColumnType("bigint");

                    b.Property<string>("MnemonicName")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<long?>("RemovalId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AvatarId");

                    b.HasIndex("CreationId");

                    b.HasIndex("LastEditingId");

                    b.HasIndex("RemovalId");

                    b.ToTable("ProblemCategories");
                });

            modelBuilder.Entity("DataBase.Models.Region", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("CityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CreationId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsRegionSupported")
                        .HasColumnType("boolean");

                    b.Property<long?>("LastEditingId")
                        .HasColumnType("bigint");

                    b.Property<long>("QueuePosition")
                        .HasColumnType("bigint");

                    b.Property<long?>("RemovalId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CreationId");

                    b.HasIndex("LastEditingId");

                    b.HasIndex("RemovalId");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("DataBase.Models.Report", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Adress")
                        .HasColumnType("text");

                    b.Property<float>("BaseRate")
                        .HasColumnType("real");

                    b.Property<NpgsqlPoint>("Coordinates")
                        .HasColumnType("point");

                    b.Property<DateTime>("DateConsideration")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateFinalControl")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateFinishExecution")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateLastEditing")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateRemoval")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateStartExecution")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsRequestModeration")
                        .HasColumnType("boolean");

                    b.Property<long>("ModeratorId")
                        .HasColumnType("bigint");

                    b.Property<string>("ProblemDescription")
                        .HasColumnType("text");

                    b.Property<long>("RelationReportId")
                        .HasColumnType("bigint");

                    b.Property<long>("StatusId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ModeratorId");

                    b.HasIndex("RelationReportId");

                    b.HasIndex("StatusId");

                    b.HasIndex("UserId");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("DataBase.Models.ReportByProblemCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("ProblemCategoryId")
                        .HasColumnType("bigint");

                    b.Property<long>("ReportId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ProblemCategoryId");

                    b.HasIndex("ReportId");

                    b.ToTable("ReportsByProblemCategories");
                });

            modelBuilder.Entity("DataBase.Models.ReportStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ReportStatuses");
                });

            modelBuilder.Entity("DataBase.Models.ReportView", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("ReportId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ReportId");

                    b.HasIndex("UserId");

                    b.ToTable("ReportsViews");
                });

            modelBuilder.Entity("DataBase.Models.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long?>("CreationId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LastEditingId")
                        .HasColumnType("bigint");

                    b.Property<string>("MnemonicName")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<long?>("RemovalId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreationId");

                    b.HasIndex("LastEditingId");

                    b.HasIndex("RemovalId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("DataBase.Models.Schedule", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("HCSId")
                        .HasColumnType("bigint");

                    b.Property<TimeSpan>("Time")
                        .HasColumnType("interval");

                    b.HasKey("Id");

                    b.HasIndex("HCSId");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("DataBase.Models.StopOnRoute", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("IsFinish")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsStart")
                        .HasColumnType("boolean");

                    b.Property<int>("PositionNumber")
                        .HasColumnType("integer");

                    b.Property<long>("TransportRouteId")
                        .HasColumnType("bigint");

                    b.Property<long>("TransportStopId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TransportRouteId");

                    b.HasIndex("TransportStopId");

                    b.ToTable("StopsOnRoutes");
                });

            modelBuilder.Entity("DataBase.Models.TransportCompany", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TransportCompanies");
                });

            modelBuilder.Entity("DataBase.Models.TransportRoute", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long?>("CreationId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LastEditingId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Number")
                        .HasColumnType("text");

                    b.Property<long?>("RemovalId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreationId");

                    b.HasIndex("LastEditingId");

                    b.HasIndex("RemovalId");

                    b.ToTable("TransportRoutes");
                });

            modelBuilder.Entity("DataBase.Models.TransportStop", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("CityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CreationId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LastEditingId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<long?>("RemovalId")
                        .HasColumnType("bigint");

                    b.Property<long>("TransportCompanyId")
                        .HasColumnType("bigint");

                    b.Property<NpgsqlPoint>("Сoordinates")
                        .HasColumnType("point");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CreationId");

                    b.HasIndex("LastEditingId");

                    b.HasIndex("RemovalId");

                    b.HasIndex("TransportCompanyId");

                    b.ToTable("TransportStops");
                });

            modelBuilder.Entity("DataBase.Models.TransportStopAction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<TimeSpan>("ArrivalTime")
                        .HasColumnType("interval");

                    b.Property<TimeSpan>("DepartureTime")
                        .HasColumnType("interval");

                    b.Property<long>("StopOnRouteId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("StopOnRouteId");

                    b.ToTable("TransportStopActions");
                });

            modelBuilder.Entity("DataBase.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime?>("DateEmailConfirmation")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateSMSConfirmation")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("EmailConfirmationCode")
                        .HasColumnType("integer");

                    b.Property<string>("Login")
                        .HasColumnType("text");

                    b.Property<int?>("SMSConfirmationCode")
                        .HasColumnType("integer");

                    b.Property<byte[]>("SaltPassword")
                        .HasColumnType("bytea");

                    b.Property<byte[]>("SaltValue")
                        .HasColumnType("bytea");

                    b.Property<long>("UserProfileId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserProfileId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Login = "supper",
                            SaltPassword = new byte[] { 179, 116, 232, 248, 45, 66, 50, 216, 71, 167, 174, 126, 161, 156, 7, 15, 1, 180, 238, 187, 20, 54, 156, 229, 208, 213, 38, 9, 101, 129, 20, 29 },
                            SaltValue = new byte[] { 242, 3, 62, 221, 169, 59, 244, 197, 207, 234, 53, 50, 77, 20, 139, 149, 229, 94, 234, 17, 19, 5, 169, 55, 184, 124, 139, 169, 205, 6, 47, 224 },
                            UserProfileId = 1L
                        });
                });

            modelBuilder.Entity("DataBase.Models.UserProfile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long?>("BlockId")
                        .HasColumnType("bigint");

                    b.Property<long>("CreationId")
                        .HasColumnType("bigint");

                    b.Property<long>("DistrictId")
                        .HasColumnType("bigint");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("text");

                    b.Property<bool>("IsBlock")
                        .HasColumnType("boolean");

                    b.Property<long?>("LastEditingId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<bool>("NotifyByEmail")
                        .HasColumnType("boolean");

                    b.Property<bool>("NotifyBySMS")
                        .HasColumnType("boolean");

                    b.Property<string>("Patronymic")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<long?>("RemovalId")
                        .HasColumnType("bigint");

                    b.Property<bool>("RequestAnonymity")
                        .HasColumnType("boolean");

                    b.Property<string>("Surname")
                        .HasColumnType("text");

                    b.Property<long?>("UnblockId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BlockId");

                    b.HasIndex("CreationId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("LastEditingId");

                    b.HasIndex("RemovalId");

                    b.HasIndex("UnblockId");

                    b.ToTable("UsersProfiles");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreationId = 1L,
                            DistrictId = 1L,
                            IsBlock = false,
                            Name = "Supper",
                            NotifyByEmail = false,
                            NotifyBySMS = false,
                            RequestAnonymity = false,
                            Surname = "Account"
                        });
                });

            modelBuilder.Entity("DataBase.Models.UserRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UsersRoles");
                });

            modelBuilder.Entity("DataBase.Models.ActionMeta", b =>
                {
                    b.HasOne("DataBase.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("DataBase.Models.District", b =>
                {
                    b.HasOne("DataBase.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataBase.Models.DraftReport", b =>
                {
                    b.HasOne("DataBase.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataBase.Models.DraftReportByProblemCategory", b =>
                {
                    b.HasOne("DataBase.Models.DraftReport", "DraftReport")
                        .WithMany()
                        .HasForeignKey("DraftReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataBase.Models.ProblemCategory", "ProblemCategory")
                        .WithMany()
                        .HasForeignKey("ProblemCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataBase.Models.Driver", b =>
                {
                    b.HasOne("DataBase.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("DataBase.Models.DriverOnRoute", b =>
                {
                    b.HasOne("DataBase.Models.Driver", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataBase.Models.TransportRoute", "TransportRoute")
                        .WithMany()
                        .HasForeignKey("TransportRouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataBase.Models.HCS", b =>
                {
                    b.HasOne("DataBase.Models.Avatar", "Avatar")
                        .WithMany()
                        .HasForeignKey("AvatarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataBase.Models.ActionMeta", "Creation")
                        .WithMany()
                        .HasForeignKey("CreationId");

                    b.HasOne("DataBase.Models.HCSType", "HCSType")
                        .WithMany()
                        .HasForeignKey("HCSTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataBase.Models.ActionMeta", "LastEditing")
                        .WithMany()
                        .HasForeignKey("LastEditingId");

                    b.HasOne("DataBase.Models.ActionMeta", "Removal")
                        .WithMany()
                        .HasForeignKey("RemovalId");

                    b.HasOne("DataBase.Models.User", "ResponsiblePerson")
                        .WithMany()
                        .HasForeignKey("ResponsiblePersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataBase.Models.HCSByProblemCategory", b =>
                {
                    b.HasOne("DataBase.Models.HCS", "HCS")
                        .WithMany()
                        .HasForeignKey("HCSId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataBase.Models.ProblemCategory", "ProblemCategory")
                        .WithMany()
                        .HasForeignKey("ProblemCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataBase.Models.HCSByRegion", b =>
                {
                    b.HasOne("DataBase.Models.HCS", "HCS")
                        .WithMany()
                        .HasForeignKey("HCSId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataBase.Models.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataBase.Models.HCSTask", b =>
                {
                    b.HasOne("DataBase.Models.ActionMeta", "Creation")
                        .WithMany()
                        .HasForeignKey("CreationId");

                    b.HasOne("DataBase.Models.HCS", "HCS")
                        .WithMany()
                        .HasForeignKey("HCSId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataBase.Models.HCSTaskType", "HCSTaskType")
                        .WithMany()
                        .HasForeignKey("HCSTaskTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataBase.Models.ActionMeta", "LastEditing")
                        .WithMany()
                        .HasForeignKey("LastEditingId");

                    b.HasOne("DataBase.Models.ActionMeta", "Removal")
                        .WithMany()
                        .HasForeignKey("RemovalId");

                    b.HasOne("DataBase.Models.Report", "Report")
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataBase.Models.MailingQueue", b =>
                {
                    b.HasOne("DataBase.Models.ActionMeta", "Creation")
                        .WithMany()
                        .HasForeignKey("CreationId");

                    b.HasOne("DataBase.Models.ActionMeta", "LastEditing")
                        .WithMany()
                        .HasForeignKey("LastEditingId");

                    b.HasOne("DataBase.Models.MailingStatus", "MailingStatus")
                        .WithMany()
                        .HasForeignKey("MailingStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataBase.Models.ActionMeta", "Removal")
                        .WithMany()
                        .HasForeignKey("RemovalId");
                });

            modelBuilder.Entity("DataBase.Models.MediaData", b =>
                {
                    b.HasOne("DataBase.Models.DraftReport", "DraftReport")
                        .WithMany()
                        .HasForeignKey("DraftReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataBase.Models.Report", "Report")
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataBase.Models.MediaDataType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataBase.Models.ProblemCategory", b =>
                {
                    b.HasOne("DataBase.Models.Avatar", "Avatar")
                        .WithMany()
                        .HasForeignKey("AvatarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataBase.Models.ActionMeta", "Creation")
                        .WithMany()
                        .HasForeignKey("CreationId");

                    b.HasOne("DataBase.Models.ActionMeta", "LastEditing")
                        .WithMany()
                        .HasForeignKey("LastEditingId");

                    b.HasOne("DataBase.Models.ActionMeta", "Removal")
                        .WithMany()
                        .HasForeignKey("RemovalId");
                });

            modelBuilder.Entity("DataBase.Models.Region", b =>
                {
                    b.HasOne("DataBase.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataBase.Models.ActionMeta", "Creation")
                        .WithMany()
                        .HasForeignKey("CreationId");

                    b.HasOne("DataBase.Models.ActionMeta", "LastEditing")
                        .WithMany()
                        .HasForeignKey("LastEditingId");

                    b.HasOne("DataBase.Models.ActionMeta", "Removal")
                        .WithMany()
                        .HasForeignKey("RemovalId");
                });

            modelBuilder.Entity("DataBase.Models.Report", b =>
                {
                    b.HasOne("DataBase.Models.User", "Moderator")
                        .WithMany()
                        .HasForeignKey("ModeratorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataBase.Models.Report", "RelationReport")
                        .WithMany()
                        .HasForeignKey("RelationReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataBase.Models.ReportStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataBase.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataBase.Models.ReportByProblemCategory", b =>
                {
                    b.HasOne("DataBase.Models.ProblemCategory", "ProblemCategory")
                        .WithMany()
                        .HasForeignKey("ProblemCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataBase.Models.Report", "Report")
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataBase.Models.ReportView", b =>
                {
                    b.HasOne("DataBase.Models.Report", "Report")
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataBase.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataBase.Models.Role", b =>
                {
                    b.HasOne("DataBase.Models.ActionMeta", "Creation")
                        .WithMany()
                        .HasForeignKey("CreationId");

                    b.HasOne("DataBase.Models.ActionMeta", "LastEditing")
                        .WithMany()
                        .HasForeignKey("LastEditingId");

                    b.HasOne("DataBase.Models.ActionMeta", "Removal")
                        .WithMany()
                        .HasForeignKey("RemovalId");
                });

            modelBuilder.Entity("DataBase.Models.Schedule", b =>
                {
                    b.HasOne("DataBase.Models.HCS", "HCS")
                        .WithMany()
                        .HasForeignKey("HCSId");
                });

            modelBuilder.Entity("DataBase.Models.StopOnRoute", b =>
                {
                    b.HasOne("DataBase.Models.TransportRoute", "TransportRoute")
                        .WithMany()
                        .HasForeignKey("TransportRouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataBase.Models.TransportStop", "TransportStop")
                        .WithMany()
                        .HasForeignKey("TransportStopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataBase.Models.TransportRoute", b =>
                {
                    b.HasOne("DataBase.Models.ActionMeta", "Creation")
                        .WithMany()
                        .HasForeignKey("CreationId");

                    b.HasOne("DataBase.Models.ActionMeta", "LastEditing")
                        .WithMany()
                        .HasForeignKey("LastEditingId");

                    b.HasOne("DataBase.Models.ActionMeta", "Removal")
                        .WithMany()
                        .HasForeignKey("RemovalId");
                });

            modelBuilder.Entity("DataBase.Models.TransportStop", b =>
                {
                    b.HasOne("DataBase.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataBase.Models.ActionMeta", "Creation")
                        .WithMany()
                        .HasForeignKey("CreationId");

                    b.HasOne("DataBase.Models.ActionMeta", "LastEditing")
                        .WithMany()
                        .HasForeignKey("LastEditingId");

                    b.HasOne("DataBase.Models.ActionMeta", "Removal")
                        .WithMany()
                        .HasForeignKey("RemovalId");

                    b.HasOne("DataBase.Models.TransportCompany", "TransportCompany")
                        .WithMany()
                        .HasForeignKey("TransportCompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataBase.Models.TransportStopAction", b =>
                {
                    b.HasOne("DataBase.Models.StopOnRoute", "StopOnRoute")
                        .WithMany()
                        .HasForeignKey("StopOnRouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataBase.Models.User", b =>
                {
                    b.HasOne("DataBase.Models.UserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataBase.Models.UserProfile", b =>
                {
                    b.HasOne("DataBase.Models.ActionMeta", "Block")
                        .WithMany()
                        .HasForeignKey("BlockId");

                    b.HasOne("DataBase.Models.ActionMeta", "Creation")
                        .WithMany()
                        .HasForeignKey("CreationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataBase.Models.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataBase.Models.ActionMeta", "LastEditing")
                        .WithMany()
                        .HasForeignKey("LastEditingId");

                    b.HasOne("DataBase.Models.ActionMeta", "Removal")
                        .WithMany()
                        .HasForeignKey("RemovalId");

                    b.HasOne("DataBase.Models.ActionMeta", "Unblock")
                        .WithMany()
                        .HasForeignKey("UnblockId");
                });

            modelBuilder.Entity("DataBase.Models.UserRole", b =>
                {
                    b.HasOne("DataBase.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataBase.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
